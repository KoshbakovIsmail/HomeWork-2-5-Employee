package pro.isa.EmployeerBook.Server.Exception;

public class EmployeeAlredyAddedException extends RuntimeException {

}
/*
    Привет! На связи домашнее задание урока 2.8. Stream API и Optional.

    Цель сегодняшней домашней работы — научиться менять реализацию через циклы на Steam API.

    Внимание! В этой домашней работе вам понадобятся данные из курсовой.
    Среднее время выполнения: 60 минут.

            Шаг 1. Добавить в поле Employee поля «Зарплата» и «Отдел» из курсовой работы.
            Шаг 2. В текущий проект на Spring перенести методы работы с отделами из курсовой работы.
            Шаг 3. Заменить реализацию через циклы на Stream API. Написать новый контроллер и сервис, которые будут:
    1)Возвращать сотрудника с максимальной зарплатой на основе номера отдела, который приходит в запрос из браузера.
            /departments/max-salary?departmentId=5
    2)Возвращать сотрудника с минимальной зарплатой на основе номера отдела.
            /departments/min-salary?departmentId=5
    3)Возвращать всех сотрудников по отделу.
            /departments/all?departmentId=5
    4)Возвращать всех сотрудников с разделением по отделам.
            /departments/all

    Подсказка
    Для того чтобы получить список сотрудников, надо в новый сервис заинжектить старый сервис и запросить список
    всех сотрудников, затем этот список пропустить через Stream API.
    Для поиска минимальной или максимальной зарплаты нужно после фильтрации использовать методы min и max,
    передав в качестве компаратора строку кода, представленную ниже.
            Comparator.comparingInt(employee -> employee.getSalary())
    */